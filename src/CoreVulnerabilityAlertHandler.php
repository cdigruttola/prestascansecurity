<?php
/**
 * Copyright 2023 Profileo Group <contact@profileo.com> (https://www.profileo.com/fr/)
 *
 * For questions or comments about this software, contact Maxime Morel-Bailly <security@prestascan.com>
 * List of required attribution notices and acknowledgements for third-party software can be found in the NOTICE file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author    Profileo Group - Complete list of authors and contributors to this software can be found in the AUTHORS file.
 * @copyright Since 2023 Profileo Group <contact@profileo.com> (https://www.profileo.com/fr/)
 * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0
 */

namespace PrestaScan;

if (!defined('_PS_VERSION_')) {
    exit;
}

class CoreVulnerabilityAlertHandler
{
    private $module;

    public function __construct(\Module $module)
    {
        $this->module = $module;
    }

    public function handle($vulnerabilityData)
    {
        if (isset($vulnerabilityData['alert_core_unsubscribe']) && $vulnerabilityData['alert_core_unsubscribe']) {
            $alert = new \PrestaScanVulnAlerts();
            $saved = $alert->saveCoreVulnerabilityAlert($vulnerabilityData, true);
            $data = [
                'confirmation_received' => $saved,
                'alert_core_unsubscribe' => true,
                'numberVulnerabilities' => $vulnerabilityData['numberVulnerabilities']
            ];
            return $data;
        }
        $psVersion = \PrestaScan\Tools::getPrestashopVersion();
        $vulnerability = $vulnerabilityData['core_vulnerability'];
        $fromVersion = $vulnerability['from_version'];
        $toVersion = $vulnerability['to_version'];
        $isCurrentVersionVulnerable = false;
        if (empty($fromVersion) && empty($toVersion)) {
            $isCurrentVersionVulnerable = true;
        } elseif (empty($fromVersion)) {
            // Compare $version to $toVersion
            if (\PrestaScan\Tools::versionCompareExtended($psVersion, $toVersion) <= 0) {
                $isCurrentVersionVulnerable = true;
            }
        } elseif (empty($toVersion)) {
            // Compare $version to $fromVersion
            if (\PrestaScan\Tools::versionCompareExtended($psVersion, $fromVersion) >= 0) {
                $isCurrentVersionVulnerable = true;
            }
        } else {
            // Compare $version to both $fromVersion and $toVersion
            if (\PrestaScan\Tools::versionCompareExtended($psVersion, $fromVersion) >= 0
                && \PrestaScan\Tools::versionCompareExtended($psVersion, $toVersion) <= 0) {
                $isCurrentVersionVulnerable = true;
            }
        }
        $saved = false;
        if ($isCurrentVersionVulnerable) {
            $alert = new \PrestaScanVulnAlerts();
            $saved = $alert->saveCoreVulnerabilityAlert($vulnerability);
        }
        $data = [
            'confirmation_received' => $saved,
            'core_present_vulnerable' => $isCurrentVersionVulnerable,
        ];
        return $data;
    }
}
